#!/bin/env lua

local make = require('assets.make')
local luaVersions = {"5.1","5.2","5.3","5.4"}
local sepline = "*******************************"
local sepline2= "-------------------------------"


function test_compile(luaver)
  print(("Compiling for Lua %s"):format(luaver))
  print(sepline)
  make.exec("LUAROCKS_CONFIG=./assets/devconf.lua luarocks --tree ./out --lua-version %s build",luaver)
end


function test_lua(luaver)
  local lbin  = ("lua%s"):format(luaver)
  local lpath = ("./out/lib/lua/%s/?.lua"):format(luaver)
  local cpath = ("./out/lib/lua/%s/?.so" ):format(luaver)

  local p = io.popen("ls tests/*.lua 2> /dev/null","r")
  if p == nil then return end

  print(("\nTesting with Lua %s"):format(luaver))
  print(sepline)
  testnum = 0
  local file = p:read()
  while file do
    testnum = testnum + 1
    print(("\n %d | %s "):format(testnum, file))
    print(sepline2)
    make.exec(
      [[ %s -e 'package.path=%q package.cpath=%q' %q ]],
      lbin, lpath, cpath, file
    )
    file = p:read()
  end
end



--
-- Actions
--
local actions = {}


function actions.clean()
  make.exec("rm -rf ./out src/*.o src/*/*.o sc")
end


function actions.test()
  for i,luaver in ipairs(luaVersions) do
    if (i % 2) == 0 then print "\27[37;40m\n" else print "\27[37;0m\n" end
    test_compile(luaver)
    test_lua(luaver)
  end
  print("\27[0m")
end


function actions.sparse()
  local cmd = table.concat {
    [[ sparse -Wsparse-error ]],
    [[ -Wno-declaration-after-statement ]],
    [[ -Wsparse-all ]],
    [[ -I/usr/include/lua%s ]],
    [[ -I./src ]],
    [[ -I./src/lib ]],
    [[ src/*c 2>&1 | grep -v "unknown attribute\|note: in included file" | tee /dev/stderr | wc -l ]]
  }
  print("\nRunning sparse")
  print(sepline)
  for _,luaver in ipairs(luaVersions) do
    print (("\n - Targeting C for Lua %s"):format(luaver))
    if (make.rexec(cmd:format(luaver)))[1] ~= "0" then
      os.exit(1)
    end
  end
  print("")
  print(sepline,"\nSparsed OK! :)\n")
end


make.run(actions)
